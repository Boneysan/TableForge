// tests/security/vulnerability/csrf.test.ts
import { describe, it, expect } from 'vitest';
import request from 'supertest';
import { app } from '@server/index';

describe('CSRF Protection Tests', () => {
  describe('Cross-Site Request Forgery Prevention', () => {
    it('should require CSRF tokens for state-changing operations', async () => {
      const stateChangingEndpoints = [
        { method: 'POST', path: '/api/rooms', data: { name: 'CSRF Test Room' } },
        { method: 'PUT', path: '/api/rooms/test-room', data: { name: 'Updated Room' } },
        { method: 'DELETE', path: '/api/rooms/test-room' },
        { method: 'POST', path: '/api/rooms/test-room/assets', data: { assetId: 'test' } }
      ];

      for (const endpoint of stateChangingEndpoints) {
        const requestMethod = endpoint.method.toLowerCase() as 'post' | 'put' | 'delete';
        
        // Request without CSRF token from suspicious origin
        await request(app)[requestMethod](endpoint.path)
          .set('Authorization', 'Bearer valid-token')
          .set('Origin', 'http://malicious-site.com')
          .set('Referer', 'http://malicious-site.com/attack.html')
          .send(endpoint.data || {})
          .expect(res => {
            expect(res.status).toBeGreaterThanOrEqual(400);
          });
      }
    });

    it('should validate Origin and Referer headers', async () => {
      const maliciousOrigins = [
        'http://evil.com',
        'https://phishing-domain.org',
        'null',
        '',
        'file://',
        'data:text/html,<script>alert(1)</script>'
      ];

      for (const origin of maliciousOrigins) {
        await request(app)
          .post('/api/rooms')
          .set('Authorization', 'Bearer valid-token')
          .set('Origin', origin)
          .set('Referer', origin)
          .send({ name: 'CSRF Test Room' })
          .expect(res => {
            expect(res.status).toBeGreaterThanOrEqual(400);
          });
      }
    });
  });

  describe('Same-Site Cookie Protection', () => {
    it('should set secure cookie attributes', async () => {
      await request(app)
        .post('/api/auth/login')
        .send({ email: 'test@example.com', password: 'password' })
        .expect(res => {
          const cookies = res.headers['set-cookie'] || [];
          
          cookies.forEach((cookie: string) => {
            if (cookie.includes('session') || cookie.includes('auth')) {
              expect(cookie).toMatch(/SameSite=(Strict|Lax)/i);
              expect(cookie).toMatch(/Secure/i);
              expect(cookie).toMatch(/HttpOnly/i);
            }
          });
        });
    });
  });
});
