# docker/haproxy.cfg
# HAProxy configuration for WebSocket load balancing

global
    daemon
    log stdout local0
    maxconn 4096
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

defaults
    mode http
    log global
    option httplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    retries 3
    option redispatch

# HAProxy Statistics
stats enable
stats uri /stats
stats realm HAProxy\ Statistics
stats admin if TRUE

# Frontend for WebSocket connections
frontend websocket_frontend
    bind *:80
    mode http
    
    # Capture WebSocket upgrade headers
    capture request header Upgrade len 15
    capture request header Connection len 15
    capture request header Sec-WebSocket-Key len 24
    capture request header Sec-WebSocket-Version len 5
    
    # Route WebSocket connections
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_connection hdr_beg(Connection) -i upgrade
    
    # Use WebSocket backend for WebSocket connections
    use_backend websocket_backend if is_websocket is_websocket_connection
    
    # Default backend for HTTP requests
    default_backend websocket_backend

# Backend for WebSocket servers
backend websocket_backend
    mode http
    balance leastconn
    
    # Enable health checks
    option httpchk GET /health
    
    # Sticky sessions based on client IP (for testing room affinity)
    stick-table type ip size 200k expire 30m
    stick on src
    
    # WebSocket server instances
    server ws1 websocket-instance-1:8080 check inter 10s rise 2 fall 3 weight 100
    server ws2 websocket-instance-2:8080 check inter 10s rise 2 fall 3 weight 100
    server ws3 websocket-instance-3:8080 check inter 10s rise 2 fall 3 weight 100
    
    # WebSocket specific configuration
    timeout tunnel 3600s
    timeout server 3600s

# Backend for HAProxy statistics
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /
    stats refresh 30s
    stats show-legends
    stats show-node
    stats admin if TRUE

# Custom load balancing for different strategies (for testing)
backend round_robin_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    
    server ws1 websocket-instance-1:8080 check
    server ws2 websocket-instance-2:8080 check
    server ws3 websocket-instance-3:8080 check

backend least_connections_backend
    mode http
    balance leastconn
    option httpchk GET /health
    
    server ws1 websocket-instance-1:8080 check
    server ws2 websocket-instance-2:8080 check
    server ws3 websocket-instance-3:8080 check

backend weighted_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    
    server ws1 websocket-instance-1:8080 check weight 50
    server ws2 websocket-instance-2:8080 check weight 30
    server ws3 websocket-instance-3:8080 check weight 20
